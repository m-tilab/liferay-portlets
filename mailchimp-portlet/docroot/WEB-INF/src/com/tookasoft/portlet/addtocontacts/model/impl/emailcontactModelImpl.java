/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tookasoft.portlet.addtocontacts.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.tookasoft.portlet.addtocontacts.model.emailcontact;
import com.tookasoft.portlet.addtocontacts.model.emailcontactModel;
import com.tookasoft.portlet.addtocontacts.model.emailcontactSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the emailcontact service. Represents a row in the &quot;addtocontactsportlet_emailcontact&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.tookasoft.portlet.addtocontacts.model.emailcontactModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link emailcontactImpl}.
 * </p>
 *
 * @author tookasoft
 * @see emailcontactImpl
 * @see com.tookasoft.portlet.addtocontacts.model.emailcontact
 * @see com.tookasoft.portlet.addtocontacts.model.emailcontactModel
 * @generated
 */
@JSON(strict = true)
public class emailcontactModelImpl extends BaseModelImpl<emailcontact>
	implements emailcontactModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a emailcontact model instance should use the {@link com.tookasoft.portlet.addtocontacts.model.emailcontact} interface instead.
	 */
	public static final String TABLE_NAME = "addtocontactsportlet_emailcontact";
	public static final Object[][] TABLE_COLUMNS = {
			{ "emailId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "email", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table addtocontactsportlet_emailcontact (emailId LONG not null primary key,createDate DATE null,email VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table addtocontactsportlet_emailcontact";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.tookasoft.portlet.addtocontacts.model.emailcontact"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.tookasoft.portlet.addtocontacts.model.emailcontact"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static emailcontact toModel(emailcontactSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		emailcontact model = new emailcontactImpl();

		model.setEmailId(soapModel.getEmailId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setEmail(soapModel.getEmail());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<emailcontact> toModels(emailcontactSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<emailcontact> models = new ArrayList<emailcontact>(soapModels.length);

		for (emailcontactSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.tookasoft.portlet.addtocontacts.model.emailcontact"));

	public emailcontactModelImpl() {
	}

	public long getPrimaryKey() {
		return _emailId;
	}

	public void setPrimaryKey(long primaryKey) {
		setEmailId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_emailId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return emailcontact.class;
	}

	public String getModelClassName() {
		return emailcontact.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("emailId", getEmailId());
		attributes.put("createDate", getCreateDate());
		attributes.put("email", getEmail());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long emailId = (Long)attributes.get("emailId");

		if (emailId != null) {
			setEmailId(emailId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}
	}

	@JSON
	public long getEmailId() {
		return _emailId;
	}

	public void setEmailId(long emailId) {
		_emailId = emailId;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			emailcontact.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public emailcontact toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (emailcontact)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		emailcontactImpl emailcontactImpl = new emailcontactImpl();

		emailcontactImpl.setEmailId(getEmailId());
		emailcontactImpl.setCreateDate(getCreateDate());
		emailcontactImpl.setEmail(getEmail());

		emailcontactImpl.resetOriginalValues();

		return emailcontactImpl;
	}

	public int compareTo(emailcontact emailcontact) {
		long primaryKey = emailcontact.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		emailcontact emailcontact = null;

		try {
			emailcontact = (emailcontact)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = emailcontact.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<emailcontact> toCacheModel() {
		emailcontactCacheModel emailcontactCacheModel = new emailcontactCacheModel();

		emailcontactCacheModel.emailId = getEmailId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			emailcontactCacheModel.createDate = createDate.getTime();
		}
		else {
			emailcontactCacheModel.createDate = Long.MIN_VALUE;
		}

		emailcontactCacheModel.email = getEmail();

		String email = emailcontactCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			emailcontactCacheModel.email = null;
		}

		return emailcontactCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{emailId=");
		sb.append(getEmailId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.tookasoft.portlet.addtocontacts.model.emailcontact");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>emailId</column-name><column-value><![CDATA[");
		sb.append(getEmailId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = emailcontact.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			emailcontact.class
		};
	private long _emailId;
	private Date _createDate;
	private String _email;
	private emailcontact _escapedModelProxy;
}